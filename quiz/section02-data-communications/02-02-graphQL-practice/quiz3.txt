// =====================================================================
// graphql-API 문제
// =====================================================================
// http://backend-practice.codebootcamp.co.kr/graphql  에서 제공하는 API를 사용하세요.
// =====================================================================

1) createBoard를 활용해, 게시물을 하나 등록해 주세요.
mutation{
  createBoard(createBoardInput: {
    writer: "김도훈"
    password: "1111"
    title: "제목"
    contents: "null도 인자로 받나?"
    youtubeUrl: null    
  }){
    _id, writer, title, contents, youtubeUrl, likeCount, dislikeCount,  createdAt, updatedAt, deletedAt
  }
}
2) 등록한 게시글의 제목과 내용은 무엇인가요?
query{
  fetchBoard(boardId: "6579b93f5d6eaa0029f7d1c2"){_id, writer, title, contents, likeCount, dislikeCount, createdAt, updatedAt, deletedAt}
}
{
  "data": {
    "fetchBoard": {
      "_id": "6579b93f5d6eaa0029f7d1c2",
      "writer": "김도훈",
      "title": "제목",
      "contents": "null도 인자로 받나?",
      "likeCount": 0,
      "dislikeCount": 0,
      "createdAt": "2023-12-13T14:01:35.130Z",
      "updatedAt": "2023-12-13T14:01:35.130Z",
      "deletedAt": null
    }
  }
}
3) 등록한 게시글에 좋아요를 1 올려주세요.
mutation{
  likeBoard(boardId: "6579b93f5d6eaa0029f7d1c2")
}

4) 등록한 게시글에 싫어요도 1 올려주세요.
mutation{
  dislikeBoard(boardId: "6579b93f5d6eaa0029f7d1c2")
}

5) 등록한 게시글의 좋아요와 싫어요는 각각 몇 개 인가요? 
	(fetchBoard를 활용해서 확인해 보세요.)
query{
  fetchBoard(boardId: "6579b93f5d6eaa0029f7d1c2"){ likeCount, dislikeCount }
}
{
  "data": {
    "fetchBoard": {
      "likeCount": 1,
      "dislikeCount": 1
    }
  }
}
6) 현재 등록된 게시글의 총 갯수는 몇 개 인가요? 
	(어떤 API를 활용하면 좋을지 찾아보세요!)
query{
  fetchBoardsCount()
}
스키마에 필수 인자가 없어서 인자를 아무것도 안주어봤음
{
  "data": {
    "fetchBoardsCount": 12659
  }
}
조건 해제된 상태로 탐색 되는듯
7) 등록한 게시글의 제목을 수정해 보세요!
mutation{
  updateBoard(boardId: "6579b93f5d6eaa0029f7d1c2", password: "1111", updateBoardInput: {
    title: "제목 변경",
    contents: "내용두 변경"
  }){_id}
}
password 빼고 검색하니까 비밀번호가 일치하지 않는다면서 오류를 response 하는데
이럴거면 API 설계할 때 password를 필수로 설정 해놔야되는거 아닌가??

8) fetchBoards 전체 게시물 조회를 활용하여 방금 쓴 게시물을 검색해 보세요.
	(search 변수를 활용해요!)
query{
fetchBoards(	
	search:"제목"
){_id, title, writer, contents}
}	
query{
fetchBoards(	
	startDate: "2023-12-13T14:01:35.130Z",
){_id, title, writer, contents}
}
9) 등록한 게시글에 댓글을 3개 추가해 보세요.
mutation{
  createBoardComment(boardId: "6579b93f5d6eaa0029f7d1c2", createBoardCommentInput: {
    writer: "석한별"
    password: "1118"
    contents: "오랑"
    rating: 4.3
  }){_id, rating}
}
10) 첫번째 댓글의 내용을 수정해 보세요!
mutation{
updateBoardComment(
  updateBoardCommentInput: {
    contents: "내용 수정함"
  }
  password: "1118"
  boardCommentId: "6579bbca5d6eaa0029f7d1c4"
){_id, contents}
}
11) 두번째 댓글을 삭제해 보세요!
mutation{
deleteBoardComment(
  password: "1118",
  boardCommentId: "6579bbd05d6eaa0029f7d1c5"
)
}
12) 등록한 게시글에 달려있는 모든 댓글을 조회해 보세요.(작성자와 내용만 조회합니다.)
query{
fetchBoardComments(
boardId: "6579b93f5d6eaa0029f7d1c2"
){writer, contents}
}
13) BEST 게시글을 조회해 보세요! (API 이름을 잘 찾아보세요!)
query{
  fetchBoardsOfTheBest{
    _id, title, contents, likeCount, dislikeCount, createdAt, updatedAt
  }
}
14) 회원가입을 해보세요! 사용자, 즉 User를 만드는 API입니다!
mutation{
	createUser(createUserInput:{
    email: "안알려줌 이메일"
    password: "1111"
    name: "익명"
  }){_id, email, name}
}