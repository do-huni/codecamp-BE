// ======================================================================
// graphql-API 문제
// ======================================================================
// http://backend-example.codebootcamp.co.kr/graphql  에서 제공하는 API를 사용하세요.
// ======================================================================

1) 철수의 나이는 몇살인가요?(나이만 조회해 주세요.)

name이 uk가 아닌 듯. 철수라는 이름의 중복 데이터가 많다.
profiles 릴레이션은 name을 기준으로 1. 글자수가 많은 놈들 2. 내림차순 정렬이 디폴트인듯(z-a, ㅎ-ㄱ)

철수가 등장하기 시작하는 페이지
query{
  fetchProfiles(page: 56){
    number, name, age
  }
}
에서 철수 확인가능

제일앞번호 철수 찾기 쿼리
query{
  fetchProfile(name: "철수"){age}
}

2) 영희의 학교는 어디인가요?(학교만 조회해 주세요.)

query{
  fetchProfile(name: "영희"){school}
}

3) 3번 게시글의 내용과 작성일이 무엇인가요?(내용과 작성일만 조회해 주세요.)
query{
  fetchBoard(number: 3){contents, createdAt}
}
4) 본인의 이름으로 프로필을 작성해 보세요.
mutation{
  createProfile(name: "김도훈", age:23, school: "고려대학교"){_id, number, message}
}
5) 본인의 이름으로 게시글을 작성해 보세요.
mutation{
  createBoard(writer: "김도훈", title:"ㅁㄴㅇㄹ", contents: "ㅈㄱㄴ"){_id, number, message}
}
6) 자신의 프로필을 조회해 보세요.
query{
  fetchProfile(name: "김도훈"){name, age, school, number}
}
7) 자신의 게시글을 조회해 보세요.
query{
  fetchBoard(number: 62){number, writer, title, contents, like, createdAt}
}
8) 본인의 프로필에서, 학교를 자신이 졸업한 초등학교로 바꿔보세요.
mutation{
  updateProfile(
    name: "김도훈"
    age: 8
    school: "학남초등학교"
  ){
    message
  }
}
9) 본인의 게시글에서, 제목과 내용을 바꿔보세요.
mutation{
  updateBoard(
    number: 62,
    writer: "김도훈",
    title: "제목없음",
    contents: "ㅁㄴㅇㄹ"
  ){
    message
  }
}
10) 자신이 좋아하는 만화 주인공으로 프로필을 작성해 보세요.
mutation{
  createProfile(name: "코난", age:12, school: "학교"){_id, number, message}
}
11) 위 10번에서 작성한 프로필을 삭제해 보세요.
mutation{
  deleteProfile(name: "코난"){_id, number, message}
}
12) 상품을 하나 만들어 보세요.
req
mutation{
  createProduct(seller: "김도훈", createProductInput: {
    name: "전역증", detail: "96일 기다려", price: 10000
  }){_id, number, message}
}

res
{
  "data": {
    "createProduct": {
      "_id": "8440e83c-5265-4869-86e8-72bfe6f54b40",
      "number": null,
      "message": "상품이 정상적으로 등록되었습니다."
    }
  }
}
13) 위 12번에서 만들었던 상품의 가격을 500원 인상해 보세요.
mutation{
  updateProduct(productId: "8440e83c-5265-4869-86e8-72bfe6f54b40", updateProductInput: {
    price: 10500
  }){_id, number, message}
}
14) 위에서 만든 상품을 조회하되, 가격만 조회해 보세요.
query{
  fetchProduct(productId:"8440e83c-5265-4869-86e8-72bfe6f54b40"){price}
}
15) 조회했던 상품을 삭제해 보세요.
mutation{
  deleteProduct(productId:"8440e83c-5265-4869-86e8-72bfe6f54b40"){_id, number, message}
}
16) 삭제한 상품이 정말로 삭제되었는지 다시 한번 조회해 보세요.
req
query{
  fetchProduct(productId:"8440e83c-5265-4869-86e8-72bfe6f54b40"){name}
}

res
{
  "data": {
    "fetchProduct": null
  }
}
17) 게시물 목록 중, 2페이지를 조회해 보세요.
query{
  fetchBoards(page:2){number, writer, title, contents, like, createdAt}
}
18) 게시물 목록을 조회할 때, page를 입력하지 않으면, 어떤 결과가 발생하는지 확인해 보세요.
		(Hint : syntax error는 아닙니다.)
query{
  fetchBoards(page: null){number, writer, title, contents, like, createdAt}
}
page가 null일 경우 가장 최근 데이터들 조회된다.
19) 프로필이 전체 몇 개가 있는지 확인해 보세요.
req
query{
  fetchProfilesCount
}

res
{
  "data": {
    "fetchProfilesCount": 831
  }
}
20) 게시물은 몇 개가 있는지 조회해보세요.
req
query{
  fetchBoardsCount
}

res
{
  "data": {
    "fetchBoardsCount": 3161
  }
}